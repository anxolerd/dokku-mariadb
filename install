#!/usr/bin/env bash
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/config"
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

plugin-install() {
  pull-docker-image() {
    declare IMAGE="$1"
    if [[ "$(docker images -q "${IMAGE}" 2> /dev/null)" == "" ]]; then
      docker pull "${IMAGE}"
    fi
  }

  pull-docker-image "${PLUGIN_IMAGE}:${PLUGIN_IMAGE_VERSION}"
  pull-docker-image "svendowideit/ambassador:latest"
  pull-docker-image "dokkupaas/wait:0.2"
  pull-docker-image "dokkupaas/s3backup:0.8.0"
  pull-docker-image "busybox:latest"

  mkdir -p "$PLUGIN_DATA_ROOT" || echo "Failed to create $PLUGIN_SERVICE data directory"
  chown dokku:dokku "$PLUGIN_DATA_ROOT"

  mkdir -p "$PLUGIN_CONFIG_ROOT" || echo "Failed to create $PLUGIN_SERVICE config directory"
  chown dokku:dokku "$PLUGIN_CONFIG_ROOT"

  rm -f "/etc/sudoers.d/dokku-${PLUGIN_COMMAND_PREFIX}*"
  _SUDOERS_FILE="/etc/sudoers.d/dokku-${PLUGIN_COMMAND_PREFIX}"

  touch "$_SUDOERS_FILE"
  cat > "$_SUDOERS_FILE" <<EOL
%dokku ALL=(ALL) NOPASSWD:/bin/rm -f /etc/cron.d/dokku-${PLUGIN_COMMAND_PREFIX}-*
%dokku ALL=(ALL) NOPASSWD:/bin/chown root\:root /etc/cron.d/dokku-${PLUGIN_COMMAND_PREFIX}-*
%dokku ALL=(ALL) NOPASSWD:/bin/chmod 644 /etc/cron.d/dokku-${PLUGIN_COMMAND_PREFIX}-*
%dokku ALL=(ALL) NOPASSWD:/bin/mv ${PLUGIN_DATA_ROOT}/.TMP_CRON_FILE /etc/cron.d/dokku-${PLUGIN_COMMAND_PREFIX}-*
%dokku ALL=(ALL) NOPASSWD:/bin/chown 8983 $PLUGIN_DATA_ROOT/*
%dokku ALL=(ALL) NOPASSWD:/bin/chgrp 8983 $PLUGIN_DATA_ROOT/*
EOL

  chmod 0440 "$_SUDOERS_FILE"
}

plugin-services-auth-migrate() {
  local SERVICES=$(ls "$PLUGIN_DATA_ROOT" 2> /dev/null)
  if [[ -z "$SERVICES" ]]; then
    echo "There are no $PLUGIN_SERVICE services, no need to migrate"
  else
    for SERVICE in $SERVICES; do
      local NEW_SERVICE_AUTH_DIR="$PLUGIN_DATA_ROOT/$SERVICE/auth"
      local OLD_SERVICE_AUTH_DIR="$PLUGIN_DATA_ROOT/$SERVICE"
      if [[ -d "$NEW_SERVICE_AUTH_DIR" ]]; then
        # if new auth dir exists, assume the service is already migrated
        # to new auth scheme
        echo "$SERVICE is already migrated to new auth scheme"
        continue
      fi

      # Create auth dir if not exists
      mkdir -p "$NEW_SERVICE_AUTH_DIR"

      # Put existing service users to new auth dir
      # TODO: replace ln with mv as soon as plugin code supports new auth
      ln "$OLD_SERVICE_AUTH_DIR/ROOTPASSWORD" "$NEW_SERVICE_AUTH_DIR/root"
      ln "$OLD_SERVICE_AUTH_DIR/PASSWORD" "$NEW_SERVICE_AUTH_DIR/mariadb"
      echo "$SERVICE has been migrated to new auth scheme"
    done
  fi
}

plugin-install "$@"
plugin-services-auth-migrate
